'''
    알고리즘의 복잡도 표현 방법

    알고리즘 복잡도 계산이 왜 필요한가?
    - 여러 알고리즘 중에서 어떤 알고리즘이 (상황에 따라서) 더 좋은 알고리즘인가 판별하기 위함.
    -> 하나의 문제를 푸는데 있어서 정해진 알고리즘이 있는 것이 아님, 
    더 나은 알고리즘이 항상 존재할 수 있음. 그 방법들을 비교하기 위해서 복잡도 계산을 하는 것.

    알고리즘의 복잡도는
    시간 복잡도와 공간 복잡도가 있으며,
    시간 복잡도는 알고리즘의 실행 속도를 의미하고,
    공간 복잡도는 알고리즘이 사용하는 메모리 사이즈를 의미한다.

    통상 시간 복잡도만 따짐.
    시간 복잡도는 반복문을 얼마나 쓰느냐에 따라서 달라짐
    (메모리가 갈수록 발전하는 시대이고, 공간 복잡도를 계산해본적이 있는 사람이 드물다, 그래서 면접에서 잘 물어보지도 않음)

    시간 복잡도 표기는

    빅오 표기법
     -> 알고리즘의 최악의 실행시간을 표기하는 방법
     -> 최악의 상황을 가정하므로 이거보다는 나은 성능을 보장한다는 뜻이됨

    오메가 표기법
     -> 알고리즘의 최상의 실행 시간을 표기한다.

    세타 표기법
     -> 알고리즘의 평균 실행 시간을 표기한다.
    으로 나뉜다

    빅오 표기법을 쓰는게 가장 일반적이고
    가장 큰 차수로만 표현한다.
'''

# 연습1 : 1 ~ N 까지의 합을 구하는 알고리즘 작성
n = 100
Sum = 0
for i in range(1, n + 1):
    Sum += i
print(Sum)

# 연습 1 의 시간 복잡도는 ?
# O(N) 이다.

# 연습2 : 1 ~ N 합 을 공식을 이용하여 표현
# 공식은 n(n+1)/2 가 됨.


def sum_all(n):
    return int(n * (n + 1) / 2)


print(sum_all(100))

# 연습 2 의 시간 복잡도는 ?
# O(1) 이다 (반복문을 쓰지 않고 한줄로만 커버했기 때문)
# 그래서 연습 2 가 연습 1 보다 더 빠른 성능을 가진 알고리즘이다.

# 효율성을 따지는 문제에서는 항상 반복문을 최대한 줄일려고 노력해야한다. 그래야 시간초과 오류가 뜨지 않고 PS 통과가 가능함
