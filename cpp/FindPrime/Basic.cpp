/*
    소수란 기본적으로 1과 자기자신만을 약수로 갖는 수를 의미하며,
    소수를 찾는 가장 기본적인 방법은
    1, 자기자신 외의 수로 나눌 수 있게 되면, 그 수는 소수가 아니고
    그 반대의 경우는 소수다.
*/

#include <stdio.h>

bool isPrimeNumber(int x)
{
    for (int i = 2; i < x; i++)
    {
        if (x % i == 0)
        {
            return false;
        }
    }
    return true;
}

int main()
{
    printf("%d", isPrimeNumber(97));
    return 0;
}

/*
    이런 단순한 소수 찾기 함수는
    O(N) 의 시간 복잡도를 가지며,
    처음 부터 끝까지 전부 순차 탐색하듯 다 돌아야 하기 때문에
    좀 비효율적이라고 볼 수 있다.

    좀 더 빠르게 하기 위해서 
    소수 찾기를 할 때, O(N^(1/2)) 의 시간복잡도로
    계산이 가능한데, 
    그 이유는, 어떤 수의 약수는 대칭을 이루기 때문이다.
    8 = > 2 * 4 = 4 * 2 
    처럼 대칭을 이루므로, 특정한 수의 제곱근 까지만 약수 여부를 검증 하면 된다.
*/