/*  
    항상 뭔가 알고리즘을 구현하기 전에
    손으로 직접 먼저 구현을 하는 습관을 그려라.
    selection sort 에서는 
    1 2 3 ...
    맨 앞에가 먼저 정렬되고,
    그 다음이 정렬 되고 이런 식이어서
    앞에서 부터 갯수가 줄어 들었다면,
    버블 소트는 뒤에서 부터 줄어들게됨.
*/
/*
    Bubble sort
    옆에 있는 값과 비교 해서 더 작은 값을 앞으로 보냄
    구현은 쉬우나 효율성은 상당히 떨어지는 알고리즘
*/

#include <iostream>

using namespace std;

int main()
{
    int arr[10] = {1, 10, 5, 8, 7, 6, 4, 3, 2, 9};
    int i, j, temp;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 9 - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return 0;
}

/*
    선택 정렬과 마찬가지로,
    반복문을 필수로 두번을 써야 함.
    선택정렬과 마찬가지로 등차수열이 나와서
    N * (N + 1) / 2 가 되어서
    O(N^2) 가 됨
    선택정렬과 버블정렬은
    어디 방향으로 작용하느냐 그차이.
    버블 정렬은 근데 선택정렬보다 더 느림
    왜냐면 바로 옆에 랑 계속 비교를 하기 때문에
    굉장히 느리고, 선택정렬은 그나마 가장 작은 것을 
    맨 앞으로 내리기 때문에 버블 정렬보다는 살짝 빠름.
*/